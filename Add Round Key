module addroundkey(roundkey, clk, k, Key, state, rc);

reg [31:0] w0,w1,w2,w3,wshift;

input [127:0]Key;
input [3:0] rc;
output roundkey;
wire[31:0] tem;

   assign w0 = Key[31:0];
   assign w1 = Key[63:32];
   assign w2 = Key[95:64];
   assign w3 = Key[127:96];

//one-byte left circular rotation on 4 byte word (w[(i*4)-1],
wshift ={w3[7:0],w3[31:8]};

//byte substition from s box
RijndaelSBox inst_1(.a(wshift[31:24]),.c(tem[31:24]));
RijndaelSBox inst_1(.a(wshift[23:16]),.c(tem[23:16]));
RijndaelSBox inst_1(.a(wshift[15:8]),.c(tem[15:8]));
RijndaelSBox inst_1(.a(wshift[7:0]),.c(tem[7:0]));

//xor with round constant
function [31:0]	rcon;
      input	[3:0]	rc;
      case(rc)	
         4'h0: rcon=32'h01_00_00_00;
         4'h1: rcon=32'h02_00_00_00;
         4'h2: rcon=32'h04_00_00_00;
         4'h3: rcon=32'h08_00_00_00;
         4'h4: rcon=32'h10_00_00_00;
         4'h5: rcon=32'h20_00_00_00;
         4'h6: rcon=32'h40_00_00_00;
         4'h7: rcon=32'h80_00_00_00;
         4'h8: rcon=32'h1b_00_00_00;
         4'h9: rcon=32'h36_00_00_00;
         default: rcon=32'h00_00_00_00;
       endcase
endfunction




end module



