    
module addroundkey(out,Key, state, rc, RoundKey);

//For test use 127'h: Key = 54 68 61 74 73 20 6D 79 20 4B 75 6E 67 20 46 75,   rc=0
// RoundKey should be E2 32 FC F1 91 12 91 88 B1 59 E4 E6 D6 79 A2 93

wire [31:0] w0, w1, w2, w3, wshift, gw, tem;

output[127:0] RoundKey;
input [127:0] Key, state;
input [3:0] rc;
output [127:0]out;


   assign w0 = Key[31:0];
   assign w1 = Key[63:32];
   assign w2 = Key[95:64];
   assign w3 = Key[127:96];

//one-byte left circular rotation on 4 byte word (w[(i*4)-1],
  assign wshift = {w3[7:0] , w3[31:8]};

//byte substition from s box
    RijndaelSBox inst_1(.a(wshift[31:24]),.c(tem[31:24]));
    RijndaelSBox inst_2(.a(wshift[23:16]),.c(tem[23:16]));
    RijndaelSBox inst_3(.a(wshift[15:8]),.c(tem[15:8]));
    RijndaelSBox inst_4(.a(wshift[7:0]),.c(tem[7:0]));

//xor with round constant
   assign gw = tem ^ rcon(rc);
  
  
assign RoundKey[127:96] = w0 ^ gw;
assign RoundKey[95:64]= w0 ^ w1 ^ gw;
assign RoundKey[63:32]= w0 ^ w1 ^ w2 ^ gw;
assign RoundKey[31:0]= w0 ^ w1 ^ w2 ^ w3 ^ gw;


//Add Round Key
assign out = state^RoundKey;



//Function to select round constant based on round number
function [31:0]	rcon;
      input	[3:0]	rc;
      case(rc)	
         4'h0: rcon=32'h01_00_00_00;
         4'h1: rcon=32'h02_00_00_00;
         4'h2: rcon=32'h04_00_00_00;
         4'h3: rcon=32'h08_00_00_00;
         4'h4: rcon=32'h10_00_00_00;
         4'h5: rcon=32'h20_00_00_00;
         4'h6: rcon=32'h40_00_00_00;
         4'h7: rcon=32'h80_00_00_00;
         4'h8: rcon=32'h1b_00_00_00;
         4'h9: rcon=32'h36_00_00_00;
         default: rcon=32'h00_00_00_00;
       endcase
endfunction

endmodule


